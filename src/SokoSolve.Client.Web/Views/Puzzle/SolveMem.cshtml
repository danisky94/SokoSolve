@using SokoSolve.Core.Common
@using SokoSolve.Core.Solver
@using TextRenderZ.Reporting
@using System.Collections.Concurrent
@model SokoSolve.Client.Web.Controllers.PuzzleController.SolverModel
@{
    var stats = new List<SolverStatistics>()
    {
        Model.Result.Statistics
    };
    @if (Model.Result is MultiThreadedSolverBaseResult mm)
    {
        stats.AddRange(mm.StatsInner);
    }
}

<div class="row">
    <div class="col-6">
        <h1>@Model.Puzzle.Ident @Model.Puzzle.Name</h1>
        <partial name="PuzzleMap" model="@Model.Puzzle.Puzzle"/>
        @if (!Model.IsFinished)
        {
            <h2 style="color: green;">Running</h2>
        }
        
        <dl>
            <dt>Elapsed</dt>
            <dd>@Model.Result.Statistics.Elapsed.Humanize()</dd>
            
            <dt>Exit Conditions</dt>
            <dd>@Model.Command.ExitConditions</dd>
        </dl>

        <hr/>
        
        <a asp-action="ReportClash" asp-route-id="@Model.Puzzle.Ident" asp-route-token="@Model.Token">Report Key Clash</a>
        <hr/>

        @if (Model.Result.HasSolution)
        {
            <h2>Solutions</h2>
            <ul>
                @foreach (var path in Model.Result.Solutions)
                {
                    <li>Length: @path.Count steps</li>
                }
            </ul>
        }
        
        <ul>
            <li><a asp-action="SolveNode" asp-route-id="@Model.Puzzle.Ident" asp-route-token="@Model.Token" asp-route-nodeid="">Root Node</a></li>
            <li><a asp-action="SolveNode" asp-route-id="@Model.Puzzle.Ident" asp-route-token="@Model.Token" asp-route-nodeid="-1">Root Node (Reverse)</a></li>
                
        </ul>
        
        <div >
            @if (Model.Result is MultiThreadedSolverBaseResult multi)
            {
                <ul>
                    @if (multi.PoolForward is ConcurrentQueue<SolverNode> cc && cc.TryPeek(out var peek))
                    {
                        <li><a asp-action="SolveNode" asp-route-id="@Model.Puzzle.Ident" asp-route-token="@Model.Token" asp-route-nodeid="@peek.SolverNodeId">Peek</a></li>    
                    }
                    


                </ul>

                
    MapToReporting.Create<MultiThreadedSolverBaseResult>()
                  .AddColumn("Workers", x=>x.Workers?.Count)
                  .AddColumn("StatsInner", x=>x.StatsInner?.Count)
                  .AddColumn("IsRunning", x=>x.IsRunning)
                  .AddColumn("PoolReverse", x=>x.PoolReverse?.TypeDescriptor)
                  .AddColumn("PoolForward", x=>x.PoolForward?.TypeDescriptor)
                  .AddColumn("QueueForward", x=>x.QueueForward?.TypeDescriptor)
                  .AddColumn("QueueReverse", x=>x.QueueReverse?.TypeDescriptor)
                  .AddColumn("RootReverse", x=>x.RootReverse)
                  .AddColumn("Root", x=>x.Root)
                  .AddColumn("Queue", x=>x.Queue)
                  .AddColumn("Pool", x=>x.Pool)
                  .AddColumn("Evaluator", x=>x.Evaluator)
                  .AddColumn("PeekOnTick", x=>x.PeekOnTick)
                  .AddColumn("Command", x=>x.Command)
                  .AddColumn("Statistics", x=>x.Statistics)
                  .AddColumn("StaticMaps", x=>x.StaticMaps)
                  .AddColumn("Exception", x=>x.Exception)
                  .AddColumn("EarlyExit", x=>x.EarlyExit)
                  .AddColumn("ExitDescription", x=>x.ExitDescription)
                  .AddColumn("SolutionsNodes", x=>x.SolutionsNodes?.Count)
                  .AddColumn("SolutionsNodesReverse", x=>x.SolutionsNodesReverse?.Count)
                  .AddColumn("Solutions", x=>x.Solutions?.Count)
                  .AddColumn("SolutionsInvalid", x=>x.SolutionsInvalid)
                  .AddColumn("Exit", x=>x.Exit)
                  .AddColumn("Summary", x=>x.Summary)
                  .AddColumn("HasSolution", x=>x.HasSolution)
                  .RenderTo(multi, new MapToReportingRendererSingleTable(), Output);

                
            }
            
            
        </div>
        
        
    </div>
                 
               
    <div class="col-6">
        <h2>@Model.Result.ExitDescription [@Model.Result.Exit]</h2>
        
         <partial name="StatisticTable" model="@stats"/>
    </div>
   
</div>

<div class="row">
    <div class="col-8">
       
    </div>
    <div class="col-8">

    </div>
</div>

@if (Model.IsRunning)
{
    <script>   setTimeout(function() {     location.reload();    }, 1000);</script>   
}
 



